{"version":3,"sources":["Helpers/helpers.js","index.js"],"names":["calculateWinner","squares","lines","i","length","a","b","c","winner","winLine","Square","props","onClick","value","classNameButton","toColor","className","Board","renderSquare","toColorSquare","some","el","Game","useState","squareNumber","table","Array","fill","history","setHistory","xIsNext","setxIsNext","stepNumber","setStepNumber","reverseList","setReverseList","current","moves","map","step","newCoordinates","num","col","x","Math","floor","y","coordinates","desc","classLi","key","jumpTo","squeareToColor","status","classReverseList","updateHistory","slice","arraySquares","concat","handleClick","ReactDOM","render","document","getElementById"],"mappings":"mJAAMA,G,KAAkB,SAACC,GAYvB,IAXA,IAAMC,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACnBD,EAAMC,GADa,GAC9BE,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAGrC,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GACpE,MAAO,CAACC,OAAOP,EAAQI,GAAII,QAAQ,CAACJ,EAAEC,EAAEC,IAG5C,OAAO,OCdHG,EAAS,SAACC,GAAW,IAChBC,EAA2BD,EAA3BC,QAASC,EAAkBF,EAAlBE,MACVC,EAAkB,UADUH,EAAXI,QAEvB,OACA,4BACEC,UAAWF,EACXF,QAASA,GAERC,IAKDI,EAAQ,SAACN,GAEb,IAAMO,EAAe,SAACf,GACpB,IAAIgB,EAAgB,GAIpB,OAHIR,EAAMI,SAAWJ,EAAMI,QAAQK,MAAK,SAAAC,GAAE,OAAIA,IAAOlB,OACnDgB,EAAgB,WAEX,kBAAC,EAAD,CACCN,MAAOF,EAAMV,QAAQE,GACrBS,QAAW,kBAAKD,EAAMC,QAAQT,IAC9BY,QAAWI,KAIrB,OACE,6BACE,yBAAKH,UAAU,aACZE,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKF,UAAU,aACZE,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKF,UAAU,aACZE,EAAa,GACbA,EAAa,GACbA,EAAa,MAMhBI,EAAO,WAAO,IAAD,EACaC,mBAAS,CAAC,CAACC,aAAc,EAAGC,MAAOC,MAAM,GAAGC,KAAK,SAD9D,mBACVC,EADU,KACDC,EADC,OAEaN,oBAAS,GAFtB,mBAEVO,EAFU,KAEDC,EAFC,OAGmBR,mBAAS,GAH5B,mBAGVS,EAHU,KAGEC,EAHF,OAIqBV,oBAAS,GAJ9B,mBAIVW,EAJU,KAIGC,EAJH,KA6BbC,EAAUR,EAAQI,GAAYP,MAC5BjB,EAASR,EAAgBoC,GACzBC,EAAQT,EAAQU,KAAI,SAACC,EAAMpC,GAE/B,IAAMqC,EDhEU,SAACC,GACnB,IAAMC,EAAOD,EAAM,EAAK,EAGxB,MAAO,CAACE,EAFKC,KAAKC,MAAMJ,EAAM,GAAK,EAElBK,EAAGJ,GC4DKK,CAAYnB,EAAQzB,GAAGqB,cACxCwB,EAAO7C,EACT,eACAA,EACA,YACWqC,EAAeG,EAC1B,cACaH,EAAeM,EAC5B,cACIG,EAAUjB,IAAe7B,EAAI,UAAY,GAEjD,OACE,wBAAI+C,IAAK/C,GACP,4BAAQa,UAAWiC,EACnBrC,QAAS,kBA1BA,SAAC2B,GACdN,EAAcM,GACdR,EAAYQ,EAAO,IAAO,GAwBPY,CAAOhD,KAErB6C,OAKDI,EAAiBpD,EAAgBoC,GAAWpC,EAAgBoC,GAAS3B,QAAS,KAEhF4C,EAAS7C,EACT,UAAYA,EAAOA,OACA,KAAnBoB,EAAQxB,OAAgB,OAAS,iBAAmB0B,EAAU,IAAM,KAClEwB,EAAmBpB,EAAc,eAAiB,GAExD,OACE,yBAAKlB,UAAU,QACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CACEf,QAASmC,EACTxB,QAAS,SAACT,GAAD,OA5DG,SAAAkB,GAClB,IAAMkC,EAAgB3B,EAAQ4B,MAAM,EAAGxB,EAAa,GAE9CyB,EADUF,EAAcA,EAAcnD,OAAS,GAAGqB,MAC3B+B,QAEzBxD,EAAgByD,IAAiBA,EAAapC,KAGlDoC,EAAapC,GAAMS,EAAU,IAAM,IAEnCD,EAAW0B,EAAcG,OAAO,CAAClC,aAAcH,EAAII,MAAOgC,KAC1DxB,EAAcsB,EAAcnD,QAC5B2B,GAAYD,IAgDU6B,CAAYxD,IAC5BY,QAASqC,KAGb,yBAAKpC,UAAU,aACb,6BAAMqC,GACN,4BAAQzC,QAAS,WA9CrBuB,GAAgBD,KA8CZ,gBACA,wBAAIlB,UAAWsC,GAAmBjB,MAQ1CuB,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,U","file":"static/js/main.0bb62ce7.chunk.js","sourcesContent":["const calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  \n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {winner:squares[a], winLine:[a,b,c]};\n    }\n  }\n  return null;\n} \n\nconst coordinates = (num) => {\n  const col = (num % 3) + 1;\n  const line = Math.floor(num / 3) + 1;\n\n  return {x: line, y: col}\n}\n\nexport {calculateWinner, coordinates};","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {calculateWinner, coordinates} from './Helpers/helpers';\n\nconst Square = (props) => {\n    const {onClick, value, toColor} = props;\n    const classNameButton = \"square \" + toColor;\n    return (\n    <button \n      className={classNameButton}\n      onClick={onClick} \n    >\n      {value}\n    </button>\n    )\n}\n\nconst Board = (props) => {\n  \n  const renderSquare = (i) => {\n    let toColorSquare = \"\";\n    if (props.toColor && props.toColor.some(el => el === i)) {\n      toColorSquare = \"toColor\";\n    }\n    return <Square \n            value={props.squares[i]} \n            onClick = {()=> props.onClick(i)}\n            toColor = {toColorSquare}\n           />;\n  }    \n\n  return (\n    <div>\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n}\n\nconst Game = () => {\n  const [history, setHistory] = useState([{squareNumber: 0, table: Array(9).fill(null)}]);\n  const [xIsNext, setxIsNext] = useState(true);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [reverseList, setReverseList] = useState(false);\n  \n  const handleClick = el => {\n    const updateHistory = history.slice(0, stepNumber + 1)\n    const current = updateHistory[updateHistory.length - 1].table;\n    const arraySquares = current.slice();\n\n    if (calculateWinner(arraySquares) || arraySquares[el]) {\n      return;\n    }\n    arraySquares[el] = xIsNext ? \"X\" : \"Y\";\n    \n    setHistory(updateHistory.concat({squareNumber: el, table: arraySquares}));\n    setStepNumber(updateHistory.length);\n    setxIsNext(!xIsNext);   \n  };\n  \n  const jumpTo = (step) => {\n    setStepNumber(step);\n    setxIsNext((step % 2) === 0);\n  }\n  const reverseListHandle = () => {\n    setReverseList(!reverseList)\n  }\n\n  let current = history[stepNumber].table;\n  const winner = calculateWinner(current);\n  const moves = history.map((step, i) => {\n    \n    const newCoordinates = coordinates(history[i].squareNumber);\n    const desc = i\n      ? \"Go to move #\" +\n        i +\n        \" | \" +\n        \"line: \" + newCoordinates.x +\n        \" / \" +\n        \"column: \" + newCoordinates.y\n      : \"Go to start\";\n      const classLi = stepNumber === i ? \"li-bold\" : \"\";\n      \n    return (\n      <li key={i}>\n        <button className={classLi} \n        onClick={() => jumpTo(i)}\n        >\n        {desc}\n        </button>\n      </li>\n    );\n  });\n  const squeareToColor = calculateWinner(current) ? calculateWinner(current).winLine: null;\n\n  let status = winner\n    ? \"Winner \" + winner.winner\n    : history.length === 10 ? \"Draw\" : \"Next player: \" + (xIsNext ? \"X\" : \"Y\");\n  const classReverseList = reverseList ? \"reverse-list\" : \"\";  \n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board\n          squares={current}\n          onClick={(i) => handleClick(i)}\n          toColor={squeareToColor}\n        />\n      </div>\n      <div className=\"game-info\">\n        <div>{status}</div>\n        <button onClick={() => reverseListHandle()}>Reverse list</button>\n        <ul className={classReverseList}>{moves}</ul>\n      </div>\n    </div>\n  );\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}